import { parseAbi } from "viem";

export const AraLockerAbi = parseAbi([
  "error AlreadyShutdown()",
  "error AraMathUint112Overflow()",
  "error AraMathUint128Overflow()",
  "error AraMathUint224Overflow()",
  "error AraMathUint32Overflow()",
  "error AraMathUint96Overflow()",
  "error BalanceError()",
  "error BlacklistedReceiver()",
  "error BlacklistedSender()",
  "error CannotStakeZero()",
  "error CannotWithdraw()",
  "error ERC20VotesBlockNotMined()",
  "error EpochInTheFuture()",
  "error InsufficientBalance()",
  "error KickIncentiveError(string)",
  "error LengthMismatch()",
  "error MustBeContract()",
  "error MustBeShutdown()",
  "error MustChooseNewDelegatee()",
  "error NoExpLocks()",
  "error NoLocks()",
  "error NoReward()",
  "error NonContractCall()",
  "error NotOwner()",
  "error NothingToDelegate()",
  "error Nothinglocked()",
  "error OptionalReturn(string message)",
  "error ReentrantCall()",
  "error RewardError(string)",
  "error RewardRateError()",
  "error TooMuchRewards()",
  "error ZeroAddress()",
  "error ZeroAddress()",
  "event AddEpoch(uint256 indexed epochId, uint256 indexed nextEpochDate)",
  "event AddRewardToken(address indexed rewardToken)",
  "event BlacklistModified(address account, bool blacklisted)",
  "event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate)",
  "event DelegateCheckpointed(address indexed delegate)",
  "event KickIncentiveSet(uint256 rate, uint256 delay)",
  "event KickReward(address indexed _user, address indexed _kicked, uint256 _reward)",
  "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
  "event Recovered(address _token, uint256 _amount)",
  "event RewardAdded(address indexed _token, uint256 _reward)",
  "event RewardPaid(address indexed _user, address indexed _rewardsToken, uint256 _reward)",
  "event Shutdown()",
  "event Staked(address indexed _user, uint256 _paidAmount, uint256 _lockedAmount)",
  "event Withdrawn(address indexed _user, uint256 _amount, bool _relocked)",
  "function addReward(address _rewardsToken)",
  "function balanceAtEpochOf(uint256 _epoch, address _user) view returns (uint256 amount)",
  "function balanceOf(address _user) view returns (uint256 amount)",
  "function balances(address) view returns (uint112 locked, uint32 nextUnlockIndex)",
  "function blacklist(address) view returns (bool)",
  "function checkpointEpoch()",
  "function checkpoints(address account, uint32 pos) view returns ((uint224 votes, uint32 epochStart))",
  "function claimableRewards(address _account) view returns ((address token, uint256 amount)[] userRewards)",
  "function decimals() view returns (uint8)",
  "function delegate(address newDelegatee)",
  "function delegateeUnlocks(address, uint256) view returns (uint256)",
  "function delegates(address account) view returns (address)",
  "function denominator() view returns (uint256)",
  "function emergencyWithdraw()",
  "function epochCount() view returns (uint256)",
  "function epochs(uint256) view returns (uint224 supply, uint32 date)",
  "function findEpochId(uint256 _time) view returns (uint256 epoch)",
  "function getPastTotalSupply(uint256 timestamp) view returns (uint256)",
  "function getPastVotes(address account, uint256 timestamp) view returns (uint256 votes)",
  "function getReward(address _account)",
  "function getRewardWithSpecific(address _account, bool[] _skipIdx)",
  "function getVotes(address account) view returns (uint256)",
  "function isShutdown() view returns (bool)",
  "function kickExpiredLocks(address _account)",
  "function kickRewardEpochDelay() view returns (uint256)",
  "function kickRewardPerEpoch() view returns (uint256)",
  "function lastTimeRewardApplicable(address _rewardsToken) view returns (uint256)",
  "function lock(address _account, uint256 _amount)",
  "function lockDuration() view returns (uint256)",
  "function lockedBalances(address _user) view returns (uint256 total, uint256 unlockable, uint256 locked, (uint112 amount, uint32 unlockTime)[] lockData)",
  "function lockedSupply() view returns (uint256)",
  "function modifyBlacklist(address _account, bool _blacklisted)",
  "function name() view returns (string)",
  "function newRewardRatio() view returns (uint256)",
  "function numCheckpoints(address account) view returns (uint32)",
  "function owner() view returns (address)",
  "function processExpiredLocks(bool _relock)",
  "function queueNewRewards(address _rewardsToken, uint256 _rewards)",
  "function queuedRewards(address) view returns (uint256)",
  "function recoverERC20(address _tokenAddress, uint256 _tokenAmount)",
  "function renounceOwnership()",
  "function rewardData(address) view returns (uint32 periodFinish, uint32 lastUpdateTime, uint96 rewardRate, uint96 rewardPerTokenStored)",
  "function rewardDistributors(address, address) view returns (bool)",
  "function rewardPerToken(address _rewardsToken) view returns (uint256)",
  "function rewardTokens(uint256) view returns (address)",
  "function rewardsDuration() view returns (uint256)",
  "function setKickIncentive(uint256 _rate, uint256 _delay)",
  "function shutdown()",
  "function stakingToken() view returns (address)",
  "function symbol() view returns (string)",
  "function totalSupply() view returns (uint256 supply)",
  "function totalSupplyAtEpoch(uint256 _epoch) view returns (uint256 supply)",
  "function transferOwnership(address newOwner)",
  "function userData(address, address) view returns (uint128 rewardPerTokenPaid, uint128 rewards)",
  "function userLocks(address, uint256) view returns (uint112 amount, uint32 unlockTime)",
] as const);
